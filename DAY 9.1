Understand about Grid in CSS.
 ------->   
 CSS Grid Layout, often referred to simply as Grid, is a two-dimensional layout system in CSS that allows you to design complex web layouts with rows and columns. It provides a highly flexible and precise way to arrange and align content on a webpage.  

 1:Two-Dimensional Grid: 

Unlike traditional layout models, such as the box model and Flexbox, CSS Grid is a two-dimensional layout system. It simultaneously manages both rows and columns. 

 2: Grid Container and Grid Items: 

 A grid layout consists of a grid container and its grid items. 
 The grid container is an element that contains grid items. It's often an immediate parent element. 
Grid items are the children of the grid container, and they are positioned within the grid. 

 3: Defining the Grid: 

 To create a grid, you first define the columns and rows. 
 Use the grid-template-columns and grid-template-rows properties to set the sizes and structure of the grid. 
 Columns and rows can be specified as fixed sizes (e.g., pixels) or flexible sizes (e.g., percentages, fractions). 

 4: Grid Lines and Tracks: 

 Grid lines are the dividing lines between columns and rows. 
 Tracks are the spaces between grid lines where content can be placed. 
 You can name grid lines and tracks for better organization. 

 5. Placing Grid Items: 

 Grid items are placed within the grid using the grid-column and grid-row properties. 
You can also use the shorthand property grid-area to specify both column and row placement in a single declaration. 

The grid-area property specifies a grid item's size and location in a grid layout, and is a shorthand property for the following properties:

grid-row-start
grid-column-start
grid-row-end
grid-column-end 

 Explicit vs Implicit grid  

 6. Grid Gaps: 

 Grid gaps are the spaces between grid items and tracks. 
 You can control gaps between columns and rows separately using the grid-column-gap and grid-row-gap properties or the shorthand grid-gap. 

 This property is a shorthand for the following CSS properties: The gap CSS shorthand property sets the gaps (gutters) between rows and columns. 

/* column-gap */
/* row-gap */
/* gap */

 7. Grid Auto: 

Grid items can be automatically placed using grid-auto-flow. By default, they fill rows, but you can change this behavior to fill columns. 
 grid-auto-rows and grid-auto-columns control the size of automatically placed items. 

 8. Responsive Grids: 

 CSS Grid is highly responsive. Grid items can be repositioned and resized automatically as the viewport size changes. 
 Use media queries to adjust grid layouts for different screen sizes. 

 9. Alignment and Justification: 

 You can align and justify content within grid items and the grid container itself. 
 Properties like justify-items, align-items, justify-content, and align-content help you control alignment and spacing. 

 final code--------------------------------------------------------CSS FILE-------------------------------------------------------------------------------------------------
 *{
    margin:0;
    padding:0;
    box-sizing:border-box;
}
body{
    width:100%;
    height:100vh;
    display:grid;  /* because of grid content come in center.*/
    /* background-color:hsl(0,0%,94%); */
    background-color: #2c3639;
}
.grid-container{
    width:80%;
    margin:100px auto;
    background-color: #dcd7c9;
    color:white;
    box-shadow:rgba(0,0,0,0.25) 0px 54px 55px,
    rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,
    rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;
    display:grid;
    grid-template-rows:250px 250px;   /* we want 2 rows and 3 columns and here 250 px is height for 2 rows(seperately) */
    grid-template-columns: 250px 250px 250px; /* we want 3 columns */
    /* after this code  remaining space is there so because of ifr it will aquire reamining space */
    grid-template-columns:250px 250px 1fr; 
    /* but we want equally divided between all so we write */
    grid-template-columns:1fr 1fr 1fr;
    /* if you want 10 columns so there is a shorthand like */
    grid-template-columns:repeat(3,1fr);
    /* we want gap */
    /* row-gap:40px;
    column-gap:40px; */
    /* short hand to use gap */
    gap:20px;
    
    /* grid-auto-rows:250px;  */
    /* align vertically */
    align-items:center;
    align-items:self-start; /* items look like heading in there rows and column */
    align-items:self-end; /* items will come in end in there rows and column */
    align-items:stretch; /* items will be stretch or come in like normal form */
    /* justify horizontally */
    /* justify-items:self-start;
    justify-items:center; */
    grid-template-columns: 1fr min-content repeat(1,1fr); /* this will do that the big the content
    spelling is there the same length it will length of the box.  or we can say the longest the word
    size it take width acc to that */
    grid-template-columns: 1fr max-content repeat(1,1fr);
    grid-template-columns: 1fr minmax(150px,200px) repeat(1,1fr);
    grid-template-columns: 1fr minmax(150px, 1fr) repeat(1,1fr);
    /* but is not responsive to make responsive we write */
    grid-template-columns: repeat(auto-fill,minmax(250px,1fr));
    grid-template-columns:repeat(auto-fit, minmax(250px,1fr));  /*we use this */
}
.item{
    display:grid;
    text-align:center;
    text-transform:uppercase;
    font-size:20px;
    letter-spacing:2px;
    font-weight:bold;
}
.item-1 {
    background-color: #662549;
    /* item 1 will move to 2 position in a grid */
    /* grid-column-start:2;
    grid-column-end:3; */
    /* these 4 lines together bring item -1 to lower middle */
    /* grid-row-start:2;
    grid-row-end:3;
    grid-column-start:2;
    grid-column-end:3; */
    /* we have short hand to write these 4 lines in 2lines */
    /* grid-row:2/3;
    grid-column:2/3; */
    /* or in single line */
    /* grid-area:2/2/3/3; */
}
.item-2 {
    background-color: #113946;
}
.item-3 {
    background-color: #102c57;
    /* i want item-3 take space of item-2 also */
    /* grid-area:1/2/2/4; */
    /*  yes it works but item-6 is come in last row (which is 3)that we dont want in upper code
       we say we want only 2 rows but here 3 rows is created so for this to manage  we will aquire 
       that item also or in future more items come so they can also get aquire. */
       /* grid-auto-rows:250px; */  /* write this in parent */
       /* so we get more space */
       /* back to normal */

}
.item-4 {
    background-color: #884a39;
}
  .item-5 {
    background-color: #454545;
}
  .item-6 {
    background-color: #85586f;
}
------------------------------------------------------------------------------------HTML file-----------------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grid</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
   <div class="grid-container">
    <div class="item item-1">item-1</div>
    <div class="item item-2">item-2 Welcome to the grid </div>
   <!-- Welcome to the grid  -->
    <div class="item item-3">item-3</div>
    <div class="item item-4">item-4</div>
    <div class="item item-5">item-5</div>
    <div class="item item-6">item-6</div>
   </div>
</body>
</html>
----------------------------------------------------------------------------------------------------------------------------------------------------------
  

